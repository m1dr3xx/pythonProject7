from random import choice

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from callbacks.for_game import GameCallbackData
from states.games import RPSState

sps = Router()
@sps.callback_query(
    GameCallbackData.filter(F.game == 'rps'))   # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start
async def start_command(query: CallbackQuery, state: FSMContext):  # message - —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
    await query.message.answer("–ü—Ä–∏–≤–µ—Ç! –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!!!!",)
    await query.answer()
    await state.set_state(RPSState.is_running)


@sps.message(StateFilter(RPSState.is_running))
async def handle_rps_game(message: Message):
    variants = ('–ö–∞–º–µ–Ω—å ü™®', '–ë—É–º–∞–≥–∞ üìÉ', '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è')
    user_choice = message.text
    if user_choice in variants:
        bots_choice = choice(variants)
        await message.answer(f'–Ø –≤—ã–±—Ä–∞–ª {bots_choice}')
        if (bots_choice == '–ë—É–º–∞–≥–∞ üìÉ' and user_choice == '–ö–∞–º–µ–Ω—å ü™®' or
                bots_choice == '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è' and user_choice == '–ë—É–º–∞–≥–∞ üìÉ' or
                bots_choice == '–ö–∞–º–µ–Ω—å ü™®' and user_choice == '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è'
        ):
            await message.answer('–Ø –ø–æ–±–µ–¥–∏–ª üòà')
        elif bots_choice == user_choice:
            await message.answer('–ù–∏—á—å—è ü§ï')
        else:
            await message.answer('–Ø –ø—Ä–æ–∏–≥—Ä–∞–ª üò¢')
    else:
        await message.answer('–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –∫—Ä–∏–Ω–∂')